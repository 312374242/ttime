#!/usr/bin/env ruby

require 'pathname'
require 'optparse'

$LOAD_PATH.unshift((Pathname.new($0).dirname.parent + 'lib').to_s)

action = :run_gui

begin
  require 'ttime/version'
rescue LoadError
  # Couldn't load version data - we must be in git

  module TTime
    Version = '(git)'
  end
end

OptionParser.new do |opts|
  opts.on("--hebrew", "Force Hebrew locale") do
    ENV["LC_ALL"]="he_IL.UTF-8"
    ENV["LANG"]="he_IL.UTF-8"
    ENV["LANGUAGE"]="he_IL.UTF-8"
  end

  opts.on("--win32-hack", "Hack for win32 compatibility") do
    ENV["HOME"] = File::dirname($0)
  end

  opts.on("--output-xml", "Write UDonkey-compatible XML (to stdout)") do
    action = :output_xml
  end

  opts.on("--repy-utf8", "Write a UTF-8 recoded REPY") do
    action = :repy_utf8
  end

  opts.on("--version", "Print version number and exit") do
    puts TTime::Version
    exit 0
  end
end.parse!

begin
  require 'gettext'
  include GetText
rescue LoadError
  def _ s; s; end
end

# Standard unicode support activation
require 'jcode'
$KCODE = 'u'

def run_gui
  require 'ttime/gui/main_window'

  Thread.abort_on_exception = true

  Gtk.init
  a = TTime::GUI::MainWindow.instance
  Gtk.main
end

def output_xml
  require 'ttime/data'

  oldmsg = ""
  data = TTime::Data.new(:convert) do |msg,_|
    $stderr.write "#{msg}\n" if msg != oldmsg
    oldmsg = msg
  end

  require 'ttime/parse/udonkey_xml'
  TTime::Parse::UDonkeyXML.output_xml data.data
end

def repy_utf8
  require 'ttime/data'

  oldmsg = ""
  data = TTime::Data.new(:output_unicode) do |msg,_|
    $stderr.write "#{msg}\n" if msg != oldmsg
    oldmsg = msg
  end
end

self.send(action)
