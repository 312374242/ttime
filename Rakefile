require 'rake/rdoctask'
require 'fileutils'

VERSION_FILE = "lib/ttime/version.rb"

module Git
  class NotOnTag < Exception
  end

  class << self
    def get_current_head
      `git show-ref -s -h HEAD`.chomp
    end

    def get_tag_sha1s
      Dir::glob(".git/refs/tags/*").collect do |filename|
        ref = File::read(filename).chomp
        commit = `git show #{ref} | grep ^commit | head -1`.split[1]
        [ File::basename(filename), commit ]
      end
    end

    def current_tag
      current_head = get_current_head

      get_tag_sha1s.each do |tag_name, sha1sum|
        if sha1sum == current_head
          return tag_name
        end
      end

      raise NotOnTag
    end
  end
end

def debian_changelog_version
  open("debian/changelog", "r").each do |l|
    if l =~ /^ttime \((.*?)\)/
      return $1
    end
  end

  return nil
end

def write_version_file(version)
  open(VERSION_FILE, "w") do |f|
    f.puts <<-EOF
# DO NOT EDIT
# This file is auto-generated by build scripts.
# See: rake generate_version
module TTime
  Version = %q{#{version}}
end
    EOF
  end
end

def restore_git_version
  write_version_file "(git)"
end

Rake::RDocTask.new("doc") do |rdoc|
  rdoc.rdoc_dir = "doc"
  rdoc.title = "TTime -- A Technion Timetable utility"
  rdoc.main = "README.rdoc"
  rdoc.rdoc_files.include('README.rdoc')
  rdoc.rdoc_files.include('lib/**/*.rb')
end

desc "Generate ditz html pages"
task :ditz_html do
  `ditz html ditz`
end

# Base path for SSH uploads (in scp syntax)
WebsiteSSHBasePath = "lutzky.net:public_html/ttime/"

desc "Upload documentation and ditz pages"
task :upload_html => [ :doc, :ditz_html ] do
  `rsync -r ditz doc #{WebsiteSSHBasePath}`
end

desc "Find all FIXME comments"
task :fixme do
  puts `grep -r FIXME * | grep -v '.git'`
end

desc "Create mo-files for L10n"
task :makemo do
  require 'gettext/utils'
  GetText.create_mofiles(true, "po", "data/locale")
end

desc "Update pot/po files to match new version"
task :updatepo do
  require 'gettext/utils'
  GetText.update_pofiles("ttime",
                         Dir.glob("lib/**/*.rb") +
                         Dir.glob("data/ttime/*.glade") +
                         [ "bin/ttime" ],
                         "ttime 0.x.x")
end

task :generate_version do
  write_version_file Git::current_tag
end

desc "Check that the debian version matches the current tag"
task :check_debian_version do
  unless "v#{debian_changelog_version}" == Git::current_tag
    warn "WARNING: Debian version (#{debian_changelog_version}) doesn't " \
      "match git tag #{Git::current_tag}"
  end
end

desc "Build a debian package"
task :debuild => [ :check_debian_version, :generate_version, :makemo ] do
  `debuild`
  restore_git_version
end

desc "Build a debian package without signing"
task :debuild_nosign => [ :check_debian_version, :generate_version, :makemo ] do
  `debuild -uc -us`
  restore_git_version
end

desc "Zip up relevant windows package files (without Ruby)"
task :winbuild => [ :generate_version, :makemo ] do
  FileUtils::copy_file "debian/changelog", "./changelog"
  `zip -r ttime_win.zip ttime_win.bat bin data lib README.rdoc`
  File::unlink "changelog"
  restore_git_version
end
